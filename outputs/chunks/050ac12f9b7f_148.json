{
  "content": "tGPT said:\nGreat ‚Äî here's an updated version of chat_exporter.py that does the following:\n\n‚úÖ Improvements:\nAuto-detects the most recent prompt file from outputs/prompts/.\n\nCleans or creates the export directory before saving.\n\nAccepts optional --title, --format, and --verbose flags.\n\n‚úÖ New chat_exporter.py\n#!/usr/bin/env python3\n\"\"\"\nChat Exporter\n\nThis script finds the latest summary prompt, optionally cleans the export directory,\nand saves the output in the requested format (txt, md, or json).\n\"\"\"\n\nimport os\nimport json\nimport argparse\nfrom pathlib import Path\nimport shutil\n\n\nDEFAULT_PROMPTS_DIR = Path(__file__).resolve().parent.parent / \"outputs/prompts\"\nDEFAULT_EXPORT_DIR = Path(__file__).resolve().parent.parent / \"outputs/exports\"\n\n\ndef find_latest_prompt_file(prompts_dir: Path) -> Path:\n    prompt_files = sorted(prompts_dir.glob(\"summary_prompt_*.txt\"), reverse=True)\n    if not prompt_files:\n        raise FileNotFoundError(\"‚ùå No summary_prompt_*.txt files found\")\n    return prompt_files[0]\n\n\ndef clean_output_dir(output_dir: Path, verbose: bool = False):\n    if output_dir.exists():\n        shutil.rmtree(output_dir)\n        if verbose:\n            print(f\"‚úÇ Cleaned directory: {output_dir}\")\n    output_dir.mkdir(parents=True, exist_ok=True)\n    if verbose:\n        print(f\"üìÅ Created directory: {output_dir}\")\n\n\ndef export_prompt(prompt_path: Path, output_dir: Path, fmt: str, title: str, verbose: bool = False):\n    content = prompt_path.read_text(encoding=\"utf-8\")\n\n    if fmt == \"txt\":\n        output_file = output_dir / f\"{title.replace(' ', '_')}.txt\"\n        output_file.write_text(content, encoding=\"utf-8\")\n    elif fmt == \"md\":\n        output_file = output_dir / f\"{title.replace(' ', '_')}.md\"\n        md_content = f\"# {title}\\n\\n\" + content\n        output_file.write_text(md_content, encoding=\"utf-8\")\n    elif fmt == \"json\":\n        output_file = output_dir / f\"{title.replace(' ', '_')}.json\"\n        output_file.write_text(json.dumps({\"title\": title, \"content\": con",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_140836.txt",
    "chunk_id": "050ac12f9b7f_148",
    "start_char": 266400,
    "end_char": 268400,
    "created_at": "2025-05-21T08:41:33+00:00"
  }
}