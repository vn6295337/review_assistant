{
  "content": "ime\nimport argparse\nfrom pathlib import Path\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description='Export Claude chat to text file')\n    parser.add_argument('--output-dir', type=str,\n                        default='/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions',\n                        help='Directory to save the chat export')\n    parser.add_argument('--format', type=str, choices=['txt', 'md', 'json'], default='md',\n                        help='Export format (txt, md, or json)')\n    parser.add_argument('--title', type=str, default='',\n                        help='Title for the chat session')\n    return parser.parse_args()\n\n\ndef reset_output_directory(output_dir):\n    \"\"\"Delete and recreate the output directory (clean slate).\"\"\"\n    try:\n        if os.path.exists(output_dir):\n            shutil.rmtree(output_dir)\n        Path(output_dir).mkdir(parents=True, exist_ok=True)\n        print(f\"üßπ Cleaned and recreated directory: {output_dir}\")\n        return True\n    except Exception as e:\n        print(f\"‚ùå Failed to reset output directory: {e}\")\n        return False\n\n\ndef get_chat_content():\n    print(\"\\n=== Claude Chat Exporter ===\")\n    print(\"Paste your chat content below. Press Enter twice to finish.\\n\")\n\n    lines = []\n    try:\n        while True:\n            line = input()\n            if line.strip() == \"\":\n                confirm = input(\"Is this the end of your chat? (y/n): \").lower()\n                if confirm in (\"y\", \"yes\"):\n                    break\n                else:\n                    lines.append(\"\")\n            else:\n                lines.append(line)\n    except KeyboardInterrupt:\n        print(\"\\n‚ùå Input interrupted by user.\")\n    return \"\\n\".join(lines)\n\n\ndef parse_chat(content):\n    patterns = [\n        r\"Human: (.*?)(?=\\nClaude: |\\Z)\",\n        r\"Claude: (.*?)(?=\\nHuman: |\\Z)\"\n    ]\n    messages = []\n    human_parts = re.findall(patterns[0], content, re.DOTALL)\n    claude_parts = re.findall(patterns[1], ",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_140836.txt",
    "chunk_id": "050ac12f9b7f_155",
    "start_char": 279000,
    "end_char": 281000,
    "created_at": "2025-05-21T08:41:33+00:00"
  }
}