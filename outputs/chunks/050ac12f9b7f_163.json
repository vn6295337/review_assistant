{
  "content": " session')\n    return parser.parse_args()\n\n\ndef reset_output_directory(output_dir):\n    try:\n        if os.path.exists(output_dir):\n            shutil.rmtree(output_dir)\n        Path(output_dir).mkdir(parents=True, exist_ok=True)\n        print(f\"🧹 Cleaned and recreated output directory: {output_dir}\")\n        return True\n    except Exception as e:\n        print(f\"❌ Could not reset output directory: {e}\")\n        return False\n\n\ndef read_chat_from_file(filepath):\n    try:\n        with open(filepath, 'r', encoding='utf-8') as f:\n            return f.read()\n    except Exception as e:\n        print(f\"❌ Failed to read input file: {e}\")\n        return None\n\n\ndef parse_chat(content):\n    patterns = [\n        r\"Human: (.*?)(?=\\nAssistant: |\\Z)\",\n        r\"Assistant: (.*?)(?=\\nHuman: |\\Z)\"\n    ]\n    messages = []\n    human_parts = re.findall(patterns[0], content, re.DOTALL)\n    assistant_parts = re.findall(patterns[1], content, re.DOTALL)\n\n    for i in range(max(len(human_parts), len(assistant_parts))):\n        if i < len(human_parts):\n            messages.append({\"role\": \"human\", \"content\": human_parts[i].strip()})\n        if i < len(assistant_parts):\n            messages.append({\"role\": \"assistant\", \"content\": assistant_parts[i].strip()})\n    return messages\n\n\ndef format_as_markdown(messages, title):\n    now = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    md = f\"# {title}\\n\\n*Exported on: {now}*\\n\\n\"\n    for msg in messages:\n        md += f\"## {msg['role'].capitalize()}\\n\\n{msg['content']}\\n\\n---\\n\\n\"\n    return md\n\n\ndef format_as_text(messages, title):\n    now = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    txt = f\"{title}\\nExported on: {now}\\n\\n\"\n    for msg in messages:\n        txt += f\"{msg['role'].capitalize()}:\\n{msg['content']}\\n\\n{'-'*80}\\n\\n\"\n    return txt\n\n\ndef save_chat(messages, output_format, output_dir, title):\n    safe_title = re.sub(r'[^\\w\\s-]', '', title).strip().replace(' ', '_')\n    timestamp = datetime.datetime.now().strftime(\"%Y",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_140836.txt",
    "chunk_id": "050ac12f9b7f_163",
    "start_char": 293400,
    "end_char": 295400,
    "created_at": "2025-05-21T08:41:33+00:00"
  }
}