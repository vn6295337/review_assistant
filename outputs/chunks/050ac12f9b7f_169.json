{
  "content": "ks\"\nSUMMARIES_DIR = PROJECT_ROOT / \"outputs\" / \"summaries\"\nPY_DIR = PROJECT_ROOT / \"python\"\n\nFILE_CHUNKER = PY_DIR / \"file_chunker.py\"\nFILE_SUMMARIZER = PY_DIR / \"file_summarizer.py\"\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n\ndef open_nano(tmp_file: Path):\n    \"\"\"Open nano for user input; return True if nano exited cleanly.\"\"\"\n    try:\n        subprocess.run([\"nano\", str(tmp_file)])\n        return True\n    except FileNotFoundError:\n        print(\"‚ùå nano is not installed. Install it with `sudo apt-get install nano`.\")\n        return False\n\n\ndef is_file_nonempty(path: Path) -> bool:\n    return path.exists() and path.stat().st_size > 5  # >5 bytes\n\n\ndef run_python(script: Path, *args):\n    \"\"\"Run a helper Python script; bubble up errors to user.\"\"\"\n    cmd = [sys.executable, str(script), *map(str, args)]\n    result = subprocess.run(cmd)\n    if result.returncode != 0:\n        raise RuntimeError(f\"Helper script failed: {' '.join(cmd)}\")\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Paste chat via nano and run RAG workflow.\")\n    parser.add_argument(\"--title\", type=str, default=\"Chat\",\n                        help=\"Base filename prefix (default: Chat)\")\n    args = parser.parse_args()\n\n    # 1Ô∏è‚É£  Make sure project directories exist\n    CODEBASE_DIR.mkdir(parents=True, exist_ok=True)\n    CHUNKS_DIR.mkdir(parents=True, exist_ok=True)\n    SUMMARIES_DIR.mkdir(parents=True, exist_ok=True)\n\n    # 2Ô∏è‚É£  Create a temp file, open nano\n    tmp_file = Path(\"/tmp\") / f\"chat_input_{datetime.datetime.now():%Y%m%d_%H%M%S}.txt\"\n    print(\"\\nüöÄ A blank nano window will open. Paste your chat, then save & exit (Ctrl-O, Enter, Ctrl-X).\")\n    if not open_nano(tmp_file):\n        return\n\n    if not is_file_nonempty(tmp_file):\n        print(\"‚ùå No content captured. Exiting.\")\n        tmp_file.unlink(missing_ok=True)\n        return\n\n    # 3Ô∏è‚É£  Move to codebase/chat_sessions with timestamped name\n    timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\"",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_140836.txt",
    "chunk_id": "050ac12f9b7f_169",
    "start_char": 304200,
    "end_char": 306200,
    "created_at": "2025-05-21T08:41:33+00:00"
  }
}