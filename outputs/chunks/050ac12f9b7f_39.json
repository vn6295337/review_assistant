{
  "content": " self.metadata[idx], similarities[idx])\n            for idx in range(len(self.texts))\n        ]\n        \n        # Sort by similarity in descending order\n        results_with_idx.sort(key=lambda x: x[3], reverse=True)\n        \n        # Return top_k results\n        top_results = results_with_idx[:top_k]\n        \n        # Format results as dictionaries\n        results = [\n            {\n                \"text\": text,\n                \"metadata\": metadata,\n                \"similarity\": similarity\n            }\n            for _, text, metadata, similarity in top_results\n        ]\n        \n        return results\n\nclass SimpleRAGAssistant:\n    def __init__(self, chunks_dir):\n        self.chunks_dir = chunks_dir\n        self.vector_store = None\n        self.chunks = []\n        self.metadata = []\n        \n        print(f\"Initializing Simple RAG Assistant with chunks from: {chunks_dir}\")\n        \n    def load_chunks(self):\n        \"\"\"Load chunked files from the chunks directory\"\"\"\n        chunk_files = glob.glob(os.path.join(self.chunks_dir, \"*.json\"))\n        if not chunk_files:\n            print(f\"Error: No chunk files found in {self.chunks_dir}\")\n            return False\n            \n        print(f\"Found {len(chunk_files)} chunk files\")\n        \n        for chunk_file in chunk_files:\n            try:\n                with open(chunk_file, 'r') as f:\n                    chunk_data = json.load(f)\n                    \n                self.chunks.append(chunk_data['content'])\n                \n                # Extract filename from the metadata for better context\n                source_file = chunk_data.get('metadata', {}).get('source', 'Unknown')\n                if isinstance(source_file, str) and source_file.startswith('/'):\n                    source_file = Path(source_file).name  # Just keep the filename\n                    \n                self.metadata.append({\n                    \"source\": source_file,\n                    \"chunk_id\": chunk_data.get('metadata', {}).get(",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_140836.txt",
    "chunk_id": "050ac12f9b7f_39",
    "start_char": 70200,
    "end_char": 72200,
    "created_at": "2025-05-21T08:41:32+00:00"
  }
}