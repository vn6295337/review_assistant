{
  "content": "doc in docs:\n            toks = set(self._tokenise(doc))\n            for tok in toks:\n                self.vocab.add(tok)\n                self.df[tok] = self.df.get(tok, 0) + 1\n\n    def vector(self, doc):\n        tokens = self._tokenise(doc)\n        tf_raw = self._tf(tokens)\n        vec, denom = {}, max(len(tokens), 1)\n        for tok, freq in tf_raw.items():\n            tf = freq / denom\n            idf = math.log((self.doc_cnt + 1) / (self.df.get(tok, 0) + 1)) + 1\n            vec[tok] = tf * idf\n        return vec\n\n    @staticmethod\n    def cosine(a, b):\n        common = set(a) & set(b)\n        dot = sum(a[t]*b[t] for t in common)\n        mag = math.sqrt(sum(v*v for v in a.values())) * math.sqrt(sum(v*v for v in b.values()))\n        return 0.0 if mag == 0 else dot / mag\n\nclass VectorStore:\n    def __init__(self, texts, meta):\n        self.vect = SimpleVectorizer(); self.vect.fit(texts)\n        self.vecs = [self.vect.vector(t) for t in texts]\n        self.meta, self.texts = meta, texts\n\n    def search(self, query, k=3):\n        qv = self.vect.vector(query)\n        sims = [self.vect.cosine(qv, v) for v in self.vecs]\n        ranked = sorted(range(len(sims)), key=lambda i: sims[i], reverse=True)[:k]\n        return [(self.texts[i], self.meta[i], sims[i]) for i in ranked]\n\n# ───────────────────────────────────────────────────────────\n# 3. Assistant class\n# ───────────────────────────────────────────────────────────\nclass SimpleRAGAssistant:\n    def __init__(self, chunks_dir):\n        self.chunks_dir = Path(chunks_dir)\n        self.chunks, self.meta, self.store = [], [], None\n\n    def _load_chunks(self):\n        files = list(self.chunks_dir.glob(\"*.json\"))\n        if not files:\n            print(f\"❌ No chunks in {self.chunks_dir}\")\n            return False\n        for fp in files:\n            try:\n                data = json.loads(fp.read_text())\n                self.chunks.append(data[\"content\"])\n                src = Path(data.get(\"metadata\", {}).get(\"source\", fp.name)",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_140836.txt",
    "chunk_id": "050ac12f9b7f_46",
    "start_char": 82800,
    "end_char": 84800,
    "created_at": "2025-05-21T08:41:32+00:00"
  }
}