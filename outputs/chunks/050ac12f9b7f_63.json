{
  "content": "itional Setup\nIf you havenâ€™t already, install pytz:\n\npip install pytz\nLet me know if you'd like to:\n\nStore time in UTC but display in IST?\n\nAutomatically convert for frontend use?\n\nAdd timezone-aware timestamps in SQLite or Postgres?\n\nYou said:\nhow about auth.py\n\"\"\"\nAuthentication module for user login and JWT token management.\n\"\"\"\nimport jwt\nimport datetime\nfrom werkzeug.security import check_password_hash\nfrom .models import User\n\n# Secret key for JWT encoding/decoding\nSECRET_KEY = \"development-secret-key\"  # Should be in environment variables in production\n\ndef authenticate_user(username, password):\n    \"\"\"\n    Verify username and password.\n    \n    Args:\n        username: User's username\n        password: User's password\n        \n    Returns:\n        User object if authentication successful, None otherwise\n    \"\"\"\n    user = User.query.filter_by(username=username).first()\n    if user and check_password_hash(user.password_hash, password):\n        return user\n    return None\n\ndef create_jwt_token(user_id):\n    \"\"\"\n    Create a JWT token for the authenticated user.\n    \n    Args:\n        user_id: ID of the authenticated user\n        \n    Returns:\n        JWT token as string\n    \"\"\"\n    payload = {\n        'exp': datetime.datetime.utcnow() + datetime.timedelta(days=1),\n        'iat': datetime.datetime.utcnow(),\n        'sub': user_id\n    }\n    return jwt.encode(payload, SECRET_KEY, algorithm='HS256')\n\ndef decode_jwt_token(token):\n    \"\"\"\n    Decode and validate a JWT token.\n    \n    Args:\n        token: JWT token to decode\n        \n    Returns:\n        Payload of the token if valid, None otherwise\n    \"\"\"\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])\n        return payload\n    except jwt.ExpiredSignatureError:\n        return None  # Token has expired\n    except jwt.InvalidTokenError:\n        return None  # Invalid token\n\ndef token_required(f):\n    \"\"\"Decorator to protect routes that require authentication.\"\"\"\n    def decorated_functi",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_140836.txt",
    "chunk_id": "050ac12f9b7f_63",
    "start_char": 113400,
    "end_char": 115400,
    "created_at": "2025-05-21T08:41:32+00:00"
  }
}