{
  "content": " in common_terms)\n        \n        # Calculate magnitudes\n        mag1 = math.sqrt(sum(val * val for val in vec1.values()))\n        mag2 = math.sqrt(sum(val * val for val in vec2.values()))\n        \n        # Calculate cosine similarity (avoid division by zero)\n        if mag1 * mag2 == 0:\n            return 0\n        return dot_product / (mag1 * mag2)\n\nclass SimpleVectorStore:\n    \"\"\"Simple vector store using the SimpleVectorizer\"\"\"\n    \n    def __init__(self, texts, metadata=None):\n        self.vectorizer = SimpleVectorizer()\n        self.texts = texts\n        self.metadata = metadata if metadata else [{}] * len(texts)\n        \n        # Process all texts\n        self.vectorizer.fit(texts)\n        self.vectors = [self.vectorizer.get_vector(text) for text in texts]\n        \n    def similarity_search(self, query, top_k=3):\n        \"\"\"Find the most similar documents to the query\"\"\"\n        if len(self.vectors) == 0:\n            return []\n        \n        # Get query vector\n        query_vector = self.vectorizer.get_vector(query)\n        \n        # Calculate similarities\n        similarities = [\n            self.vectorizer.similarity(query_vector, doc_vector)\n            for doc_vector in self.vectors\n        ]\n        \n        # Create results with index, text, metadata, and similarity\n        results_with_idx = [\n            (idx, self.texts[idx], self.metadata[idx], similarities[idx])\n            for idx in range(len(self.texts))\n        ]\n        \n        # Sort by similarity in descending order\n        results_with_idx.sort(key=lambda x: x[3], reverse=True)\n        \n        # Return top_k results\n        top_results = results_with_idx[:top_k]\n        \n        # Format results as dictionaries\n        results = [\n            {\n                \"text\": text,\n                \"metadata\": metadata,\n                \"similarity\": similarity\n            }\n            for _, text, metadata, similarity in top_results\n        ]\n        \n        return results\n\nclass SimpleRAG",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_125041.txt",
    "chunk_id": "08c8870fc586_233",
    "start_char": 419400,
    "end_char": 421400,
    "created_at": "2025-05-21T07:21:41+00:00"
  }
}