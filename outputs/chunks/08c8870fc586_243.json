{
  "content": "-dir ./my_chunks --top-k 8\n\"\"\"\n\nimport argparse, json, os\nfrom pathlib import Path\n\n# Grab default CHUNKS_DIR from config.sh if present\nCFG = Path(__file__).resolve().parents[1] / \"scripts\" / \"config.sh\"\nDEFAULT_CHUNKS = \"./outputs/chunks\"\nif CFG.is_file():\n    with open(CFG) as f:\n        for ln in f:\n            if ln.startswith(\"export CHUNKS_DIR\"):\n                DEFAULT_CHUNKS = ln.split(\"=\",1)[1].strip().strip('\"')\n                break\n\ndef load_chunks(dir_path: Path):\n    items = []\n    for fp in dir_path.glob(\"*.json\"):\n        data = json.loads(fp.read_text())\n        text = data.get(\"text\") or data.get(\"content\") or \"\"\n        items.append({\"text\": text, \"file\": fp.name})\n    return items\n\ndef build_embeddings(chunks, model):\n    embs = model.encode([c[\"text\"] for c in chunks], convert_to_tensor=True)\n    for c,e in zip(chunks, embs): c[\"emb\"] = e\n    return chunks\n\ndef search(query, chunks, model, k):\n    qv = model.encode(query, convert_to_tensor=True)\n    from sentence_transformers import util\n    sims = util.cos_sim(qv, [c[\"emb\"] for c in chunks])[0]\n    top = sims.argsort(descending=True)[:k]\n    return [(chunks[i], float(sims[i])) for i in top]\n\ndef interactive(chunks, model, k):\n    print(\"üí¨ Ask me about your codebase (exit/quit to stop)\")\n    while True:\n        q = input(\"\\n> \").strip()\n        if q.lower() in {\"exit\",\"quit\"}: break\n        res = search(q, chunks, model, k)\n        for i,(chunk,score) in enumerate(res,1):\n            snippet = chunk[\"text\"][:500] + (\"...\" if len(chunk[\"text\"])>500 else \"\")\n            print(f\"\\n#{i} ‚Ä¢ {chunk['file']} ‚Ä¢ score‚ÄØ{score:.2f}\\n{snippet}\")\n\ndef main():\n    ap = argparse.ArgumentParser()\n    ap.add_argument(\"--chunks-dir\", default=DEFAULT_CHUNKS, help=\"Directory with chunks\")\n    ap.add_argument(\"--top-k\", type=int, default=5, help=\"Number of results\")\n    args = ap.parse_args()\n\n    dir_path = Path(args.chunks_dir)\n    if not dir_path.is_dir():\n        print(f\"‚ùå {dir_path} not found\"); return\n    chunk",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_125041.txt",
    "chunk_id": "08c8870fc586_243",
    "start_char": 437400,
    "end_char": 439400,
    "created_at": "2025-05-21T07:21:41+00:00"
  }
}