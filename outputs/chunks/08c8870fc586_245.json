{
  "content": "int verbose output\n        \n    Returns:\n        int: Number of chunks created or -1 if error\n    \"\"\"\n    try:\n        # Ensure output directory exists\n        os.makedirs(output_dir, exist_ok=True)\n        \n        # Read the file content\n        with open(input_file, 'r', encoding='utf-8', errors='replace') as f:\n            content = f.read()\n            \n        if verbose:\n            print(f\"Read {len(content)} characters from {input_file}\")\n        \n        # Calculate file hash for chunk ID prefixes\n        file_hash = hashlib.md5(input_file.encode('utf-8')).hexdigest()\n        \n        # Break the content into chunks\n        chunks = []\n        position = 0\n        chunk_id = 0\n        \n        while position < len(content):\n            # Calculate chunk end position\n            end = min(position + chunk_size, len(content))\n            \n            # Create the chunk\n            chunk = {\n                \"id\": f\"{file_hash}_{chunk_id}\",\n                \"file\": input_file,\n                \"content\": content[position:end],\n                \"chunk_id\": chunk_id\n            }\n            chunks.append(chunk)\n            \n            # Move position for next chunk, considering overlap\n            position = end - overlap if end < len(content) else end\n            chunk_id += 1\n        \n        # Save chunks to files\n        for chunk in chunks:\n            output_file = os.path.join(output_dir, f\"{chunk['id']}.json\")\n            with open(output_file, 'w', encoding='utf-8') as f:\n                json.dump(chunk, f, indent=2)\n                \n            if verbose:\n                print(f\"Saved chunk {chunk['id']} to {output_file}\")\n        \n        if verbose:\n            print(f\"Created {len(chunks)} chunks with size {chunk_size} and overlap {overlap}\")\n        \n        return len(chunks)\n        \n    except Exception as e:\n        print(f\"Error chunking file: {str(e)}\")\n        return -1\n\ndef main():\n    \"\"\"Main function to parse arguments and run the chunker",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_125041.txt",
    "chunk_id": "08c8870fc586_245",
    "start_char": 441000,
    "end_char": 443000,
    "created_at": "2025-05-21T07:21:41+00:00"
  }
}