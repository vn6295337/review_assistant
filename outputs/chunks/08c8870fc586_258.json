{
  "content": "User\n\n# Secret key for JWT encoding/decoding\nSECRET_KEY = \"development-secret-key\"  # Should be in environment variables in production\n\ndef authenticate_user(username, password):\n    \"\"\"\n    Verify username and password.\n    \n    Args:\n        username: User's username\n        password: User's password\n        \n    Returns:\n        User object if authentication successful, None otherwise\n    \"\"\"\n    user = User.query.filter_by(username=username).first()\n    if user and check_password_hash(user.password_hash, password):\n        return user\n    return None\n\ndef create_jwt_token(user_id):\n    \"\"\"\n    Create a JWT token for the authenticated user.\n    \n    Args:\n        user_id: ID of the authenticated user\n        \n    Returns:\n        JWT token as string\n    \"\"\"\n    payload = {\n        'exp': datetime.datetime.utcnow() + datetime.timedelta(days=1),\n        'iat': datetime.datetime.utcnow(),\n        'sub': user_id\n    }\n    return jwt.encode(payload, SECRET_KEY, algorithm='HS256')\n\ndef decode_jwt_token(token):\n    \"\"\"\n    Decode and validate a JWT token.\n    \n    Args:\n        token: JWT token to decode\n        \n    Returns:\n        Payload of the token if valid, None otherwise\n    \"\"\"\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])\n        return payload\n    except jwt.ExpiredSignatureError:\n        return None  # Token has expired\n    except jwt.InvalidTokenError:\n        return None  # Invalid token\n\ndef token_required(f):\n    \"\"\"Decorator to protect routes that require authentication.\"\"\"\n    def decorated_function(*args, **kwargs):\n        from flask import request, jsonify\n        token = None\n        \n        if 'Authorization' in request.headers:\n            auth_header = request.headers['Authorization']\n            if auth_header.startswith('Bearer '):\n                token = auth_header[7:]  # Remove 'Bearer ' prefix\n        \n        if not token:\n            return jsonify({'error': 'Token is missing'}), 401\n            \n       ",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_125041.txt",
    "chunk_id": "08c8870fc586_258",
    "start_char": 464400,
    "end_char": 466400,
    "created_at": "2025-05-21T07:21:41+00:00"
  }
}