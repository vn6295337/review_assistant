{
  "content": "(scores)\n    \n    # Score all chunks\n    scored_chunks = [(chunk, score_chunk(chunk)) for chunk in chunks]\n    \n    # Filter out chunks with zero score\n    scored_chunks = [(chunk, score) for chunk, score in scored_chunks if score > 0]\n    \n    # Sort by score in descending order\n    scored_chunks.sort(key=lambda x: x[1], reverse=True)\n    \n    # Return the top N chunks\n    return [chunk for chunk, _ in scored_chunks[:limit]]\n\ndef highlight_matches(content, query, context=0):\n    \"\"\"Highlight matches in the content.\"\"\"\n    keywords = query.lower().split()\n    lines = content.split('\\n')\n    result = []\n    \n    # Track which lines to include\n    include_lines = set()\n    \n    # Find lines containing keywords\n    for i, line in enumerate(lines):\n        if any(keyword in line.lower() for keyword in keywords):\n            # Add the line and context lines\n            for j in range(max(0, i - context), min(len(lines), i + context + 1)):\n                include_lines.add(j)\n    \n    # Create the highlighted content\n    for i, line in enumerate(lines):\n        if i in include_lines:\n            # Highlight the keywords\n            highlighted_line = line\n            for keyword in keywords:\n                pattern = re.compile(f'({re.escape(keyword)})', re.IGNORECASE)\n                highlighted_line = pattern.sub(r'**\\1**', highlighted_line)\n            \n            result.append(highlighted_line)\n    \n    return '\\n'.join(result)\n\ndef search_command_handler(args):\n    \"\"\"Handle the search command.\"\"\"\n    # Load chunks\n    print(f\"Loading chunks from {args.chunks_dir}...\")\n    chunks = load_chunks(args.chunks_dir, args.extensions)\n    print(f\"Loaded {len(chunks)} chunks\")\n    \n    # Search for the query\n    print(f\"Searching for '{args.query}'...\")\n    results = search_chunks(chunks, args.query, args.limit)\n    print(f\"Found {len(results)} matching chunks\")\n    \n    # Highlight matches\n    for chunk in results:\n        chunk['highlighted_content'] = highlight_matches(ch",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_125041.txt",
    "chunk_id": "08c8870fc586_273",
    "start_char": 491400,
    "end_char": 493400,
    "created_at": "2025-05-21T07:21:41+00:00"
  }
}