{
  "content": "k passed.\"\n  else\n    echo \"❌ RAG environment check failed with $missing issues.\"\n    return 1\n  fi\n}\n\n# Clean temporary files\nclean_temp_files() {\n  log \"Cleaning temporary files...\"\n  \n  # Always clean these temporary files\n  find \"$ROOT_DIR\" -type f -name \"*.pyc\" -delete\n  find \"$ROOT_DIR\" -type f -name \"*.tmp\" -delete\n  find \"$ROOT_DIR\" -type f -name \"*.temp\" -delete\n  find \"$ROOT_DIR\" -type f -name \"*~\" -delete\n  find \"$ROOT_DIR\" -type d -name \"__pycache__\" -exec rm -rf {} + 2>/dev/null || true\n  \n  echo \"✅ Temporary files cleaned.\"\n  \n  # Clean outputs if requested\n  if [[ \"$1\" == \"--all\" ]]; then\n    log \"Cleaning all output files...\"\n    rm -rf \"${CHUNKS_DIR:?}\"/* 2>/dev/null || true\n    rm -rf \"${SUMMARIES_DIR:?}\"/* 2>/dev/null || true\n    echo \"✅ All output files cleaned.\"\n  fi\n}\n\n# Show statistics\nshow_stats() {\n  log \"Gathering statistics...\"\n  \n  # Count chunks and summaries\n  chunk_count=$(find \"$CHUNKS_DIR\" -type f | wc -l)\n  summary_count=$(find \"$SUMMARIES_DIR\" -type f | wc -l)\n  total_size=$(du -sh \"$ROOT_DIR\" | awk '{print $1}')\n  \n  # Find largest files\n  echo \"RAG Assistant Statistics:\"\n  echo \"------------------------\"\n  echo \"Total chunks: $chunk_count\"\n  echo \"Total summaries: $summary_count\"\n  echo \"Total project size: $total_size\"\n  \n  echo -e \"\\nLargest chunks:\"\n  find \"$CHUNKS_DIR\" -type f -exec du -h {} \\; | sort -hr | head -5\n  \n  echo -e \"\\nMost recent activity:\"\n  find \"$ROOT_DIR\" -type f -not -path \"*/\\.*\" -mtime -7 | head -5\n}\n\n# Combine chunks\ncombine_chunks() {\n  if [[ $# -lt 2 ]]; then\n    echo \"Error: Please provide at least two files to combine\"\n    return 1\n  fi\n  \n  log \"Combining chunks: $*\"\n  \n  echo \"### Combined Context ###\"\n  echo \"# Generated on $(date)\"\n  echo \"# Files: $*\"\n  echo \"########################\"\n  echo \"\"\n  \n  # Combine all provided files with separators\n  for file in \"$@\"; do\n    if [[ -f \"$file\" ]]; then\n      echo -e \"\\n--- BEGIN: $(basename \"$file\") ---\\n\"\n      cat \"$file\"\n      echo -e \"\\n--- END: $(b",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_125041.txt",
    "chunk_id": "08c8870fc586_298",
    "start_char": 536400,
    "end_char": 538400,
    "created_at": "2025-05-21T07:21:42+00:00"
  }
}