{
  "content": "ocal path=\"$1\"\n  \n  if [[ ! -f \"$path\" ]]; then\n    echo \"Error: File not found: $path\"\n    return 1\n  fi\n  \n  log \"Regenerating chunks and summaries for $path\"\n  \n  # Check if the core scripts exist\n  if [[ ! -f \"$ROOT_DIR/core/file_chunker.py\" || ! -f \"$ROOT_DIR/core/file_summarizer.py\" ]]; then\n    echo \"Error: Core RAG scripts not found\"\n    return 1\n  fi\n  \n  # Run chunking and summarization\n  echo \"Chunking file...\"\n  python3 \"$ROOT_DIR/core/file_chunker.py\" \"$path\" --output-dir \"$CHUNKS_DIR\"\n  \n  echo \"Creating summary...\"\n  python3 \"$ROOT_DIR/core/file_summarizer.py\" \"$path\" --output-dir \"$SUMMARIES_DIR\"\n  \n  echo \"✅ Regeneration complete for $path\"\n}\n\n# Optimize a file for context window efficiency\noptimize_file() {\n  local path=\"$1\"\n  \n  if [[ ! -f \"$path\" ]]; then\n    echo \"Error: File not found: $path\"\n    return 1\n  fi\n  \n  log \"Optimizing $path for context window efficiency\"\n  \n  # Get file extension\n  ext=\"${path##*.}\"\n  \n  # Create backup\n  cp \"$path\" \"${path}.bak\"\n  echo \"✅ Created backup at ${path}.bak\"\n  \n  case \"$ext\" in\n    py)\n      # Remove unnecessary whitespace and comments\n      echo \"Optimizing Python file...\"\n      # Remove blank lines and simplify whitespace\n      sed -i '/^[[:space:]]*$/d' \"$path\"\n      # Remove comments that are on their own line (not docstrings)\n      sed -i '/^[[:space:]]*#/d' \"$path\"\n      ;;\n    sh)\n      # Optimize shell scripts\n      echo \"Optimizing shell script...\"\n      # Remove blank lines and comments\n      sed -i '/^[[:space:]]*$/d; /^[[:space:]]*#[^!]/d' \"$path\"\n      ;;\n    md|txt)\n      # Optimize markdown/text\n      echo \"Optimizing text file...\"\n      # Remove excess blank lines (keep only single blank lines)\n      sed -i '/^$/N;/^\\n$/D' \"$path\"\n      ;;\n    *)\n      echo \"Warning: Unknown file type for optimization. Basic cleanup only.\"\n      sed -i '/^[[:space:]]*$/d' \"$path\"\n      ;;\n  esac\n  \n  # Calculate space savings\n  original_size=$(wc -c < \"${path}.bak\")\n  new_size=$(wc -c < \"$path\")\n  saved=",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_125041.txt",
    "chunk_id": "08c8870fc586_300",
    "start_char": 540000,
    "end_char": 542000,
    "created_at": "2025-05-21T07:21:42+00:00"
  }
}