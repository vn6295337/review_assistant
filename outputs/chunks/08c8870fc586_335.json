{
  "content": "ead_text(encoding='utf-8')\n    except Exception as e:\n        print(f\"⚠ Error loading template: {e}\")\n        return None\n\n\ndef load_summaries(summaries_dir: Path, verbose: bool = False) -> List[dict]:\n    \"\"\"Load all summary JSON files in a directory.\"\"\"\n    summaries = []\n    try:\n        summary_files = sorted(summaries_dir.glob(\"summary_*.json\"))\n        for file in summary_files:\n            with open(file, 'r', encoding='utf-8') as f:\n                data = json.load(f)\n                summaries.append(data)\n                if verbose:\n                    print(f\"✓ Loaded summary: {file.name}\")\n    except Exception as e:\n        print(f\"⚠ Error loading summaries: {e}\")\n    return summaries\n\n\ndef generate_prompt(template: str, summaries: List[dict], title: Optional[str] = None) -> Optional[str]:\n    \"\"\"Assemble the final prompt from summaries and a template.\"\"\"\n    try:\n        summary_texts = [s.get(\"summary\", \"\") for s in summaries if s.get(\"summary\")]\n        if not summary_texts:\n            raise ValueError(\"No summaries contain text\")\n\n        joined = \"\\n\\n---\\n\\n\".join(summary_texts)\n        title = title or f\"Content Analysis {datetime.datetime.now():%Y-%m-%d}\"\n\n        return template.replace(\"{summaries}\", joined).replace(\"{title}\", title)\n    except Exception as e:\n        print(f\"⚠ Error generating prompt: {e}\")\n        return None\n\n\ndef save_prompt(prompt: str, output_dir: Path) -> Optional[Path]:\n    \"\"\"Save prompt to a timestamped .txt file.\"\"\"\n    try:\n        output_dir.mkdir(parents=True, exist_ok=True)\n        filename = f\"summary_prompt_{datetime.datetime.now():%Y%m%d_%H%M%S}.txt\"\n        output_path = output_dir / filename\n        output_path.write_text(prompt, encoding='utf-8')\n        return output_path\n    except Exception as e:\n        print(f\"⚠ Error saving prompt: {e}\")\n        return None\n\n\ndef main() -> int:\n    parser = argparse.ArgumentParser(description=\"Generate a master prompt from summarized chunks\")\n    parser.add_argument(\"",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_125041.txt",
    "chunk_id": "08c8870fc586_335",
    "start_char": 603000,
    "end_char": 605000,
    "created_at": "2025-05-21T07:21:42+00:00"
  }
}