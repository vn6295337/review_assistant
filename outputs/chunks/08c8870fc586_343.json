{
  "content": "ry,\nand saves the output in the requested format (txt, md, or json).\n\"\"\"\n\nimport os\nimport json\nimport argparse\nfrom pathlib import Path\nimport shutil\n\n\nDEFAULT_PROMPTS_DIR = Path(__file__).resolve().parent.parent / \"outputs/prompts\"\nDEFAULT_EXPORT_DIR = Path(__file__).resolve().parent.parent / \"outputs/exports\"\n\n\ndef find_latest_prompt_file(prompts_dir: Path) -> Path:\n    prompt_files = sorted(prompts_dir.glob(\"summary_prompt_*.txt\"), reverse=True)\n    if not prompt_files:\n        raise FileNotFoundError(\"‚ùå No summary_prompt_*.txt files found\")\n    return prompt_files[0]\n\n\ndef clean_output_dir(output_dir: Path, verbose: bool = False):\n    if output_dir.exists():\n        shutil.rmtree(output_dir)\n        if verbose:\n            print(f\"‚úÇ Cleaned directory: {output_dir}\")\n    output_dir.mkdir(parents=True, exist_ok=True)\n    if verbose:\n        print(f\"üìÅ Created directory: {output_dir}\")\n\n\ndef export_prompt(prompt_path: Path, output_dir: Path, fmt: str, title: str, verbose: bool = False):\n    content = prompt_path.read_text(encoding=\"utf-8\")\n\n    if fmt == \"txt\":\n        output_file = output_dir / f\"{title.replace(' ', '_')}.txt\"\n        output_file.write_text(content, encoding=\"utf-8\")\n    elif fmt == \"md\":\n        output_file = output_dir / f\"{title.replace(' ', '_')}.md\"\n        md_content = f\"# {title}\\n\\n\" + content\n        output_file.write_text(md_content, encoding=\"utf-8\")\n    elif fmt == \"json\":\n        output_file = output_dir / f\"{title.replace(' ', '_')}.json\"\n        output_file.write_text(json.dumps({\"title\": title, \"content\": content}, indent=2), encoding=\"utf-8\")\n    else:\n        raise ValueError(\"Unsupported format\")\n\n    if verbose:\n        print(f\"‚úì Exported to {output_file}\")\n    return output_file\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Export the latest prompt summary to a chosen format\")\n    parser.add_argument(\"--output-dir\", type=Path, default=DEFAULT_EXPORT_DIR,\n                        help=\"Directory to save exporte",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_125041.txt",
    "chunk_id": "08c8870fc586_343",
    "start_char": 617400,
    "end_char": 619400,
    "created_at": "2025-05-21T07:21:42+00:00"
  }
}