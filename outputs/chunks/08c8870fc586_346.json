{
  "content": "f line.strip() == \"\":\n                # Check if it's the end or just a blank line within the content\n                confirm = input(\"Is this the end of your chat? (y/n): \").lower()\n                if confirm == 'y' or confirm == 'yes':\n                    break\n                else:\n                    lines.append(\"\")  # Preserve the blank line\n            else:\n                lines.append(line)\n    except KeyboardInterrupt:\n        print(\"\\nInput interrupted.\")\n    \n    return \"\\n\".join(lines)\n\ndef parse_chat(content):\n    \"\"\"Parse chat content into structured format.\"\"\"\n    # Split into messages\n    # Common patterns in Claude chat exports\n    patterns = [\n        r\"Human: (.*?)(?=\\nClaude: |\\Z)\",  # Human messages\n        r\"Claude: (.*?)(?=\\nHuman: |\\Z)\"   # Claude messages\n    ]\n    \n    messages = []\n    human_parts = re.findall(patterns[0], content, re.DOTALL)\n    claude_parts = re.findall(patterns[1], content, re.DOTALL)\n    \n    # Interleave the messages (they should alternate)\n    for i in range(max(len(human_parts), len(claude_parts))):\n        if i < len(human_parts):\n            messages.append({\"role\": \"human\", \"content\": human_parts[i].strip()})\n        if i < len(claude_parts):\n            messages.append({\"role\": \"assistant\", \"content\": claude_parts[i].strip()})\n    \n    return messages\n\ndef format_as_markdown(messages, title=\"Claude Chat Export\"):\n    \"\"\"Format messages as Markdown.\"\"\"\n    now = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    md_content = f\"# {title}\\n\\n\"\n    md_content += f\"*Exported on: {now}*\\n\\n\"\n    \n    for msg in messages:\n        role = msg[\"role\"].capitalize()\n        content = msg[\"content\"]\n        \n        # Format code blocks correctly\n        content = re.sub(r'\n(\\w*)\\n(.*?)\\n\n', r'\n\\1\\n\\2\\n\n', content, flags=re.DOTALL)\n        \n        md_content += f\"## {role}\\n\\n{content}\\n\\n\"\n        md_content += \"---\\n\\n\"  # Add separator between messages\n    \n    return md_content\n\ndef format_as_text(messages, titl",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_125041.txt",
    "chunk_id": "08c8870fc586_346",
    "start_char": 622800,
    "end_char": 624800,
    "created_at": "2025-05-21T07:21:42+00:00"
  }
}