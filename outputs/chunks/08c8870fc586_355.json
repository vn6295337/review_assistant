{
  "content": "urn md\n\n\ndef format_as_text(messages, title):\n    now = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    txt = f\"{title}\\nExported on: {now}\\n\\n\"\n    for msg in messages:\n        txt += f\"{msg['role'].capitalize()}:\\n{msg['content']}\\n\\n{'-'*80}\\n\\n\"\n    return txt\n\n\ndef save_chat(messages, output_format, output_dir, title):\n    safe_title = re.sub(r'[^\\w\\s-]', '', title).strip().replace(' ', '_')\n    timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    filename = f\"{safe_title}_{timestamp}\"\n\n    filepath = os.path.join(output_dir, f\"{filename}.{output_format}\")\n\n    with open(filepath, 'w', encoding='utf-8') as f:\n        if output_format == 'json':\n            json.dump({\"title\": title, \"messages\": messages}, f, indent=2)\n        elif output_format == 'md':\n            f.write(format_as_markdown(messages, title))\n        else:\n            f.write(format_as_text(messages, title))\n\n    return filepath\n\n\ndef extract_code_snippets(messages, output_dir):\n    code_dir = os.path.join(output_dir, \"code_snippets\")\n    Path(code_dir).mkdir(exist_ok=True)\n\n    code_pattern = r'```(\\w*)\\n(.*?)\\n```'\n    code_files = []\n\n    for i, msg in enumerate(messages):\n        for j, (lang, code) in enumerate(re.findall(code_pattern, msg[\"content\"], re.DOTALL)):\n            ext = lang if lang else \"txt\"\n            timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n            filename = f\"snippet_{i}_{j}_{timestamp}.{ext}\"\n            filepath = os.path.join(code_dir, filename)\n            with open(filepath, 'w', encoding='utf-8') as f:\n                f.write(code)\n            code_files.append(filepath)\n    return code_files\n\n\ndef main():\n    args = parse_args()\n\n    if not reset_output_directory(args.output_dir):\n        fallback = os.path.expanduser(\"~/Downloads/chat_exports\")\n        print(f\"âš  Falling back to: {fallback}\")\n        args.output_dir = fallback\n        reset_output_directory(fallback)\n\n    title = args.title.strip() or \"Claude Chat Ex",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_125041.txt",
    "chunk_id": "08c8870fc586_355",
    "start_char": 639000,
    "end_char": 641000,
    "created_at": "2025-05-21T07:21:42+00:00"
  }
}