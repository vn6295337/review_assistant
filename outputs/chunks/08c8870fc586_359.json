{
  "content": "json.dump({\"title\": title, \"messages\": messages}, f, indent=2)\n        elif output_format == 'md':\n            f.write(format_as_markdown(messages, title))\n        else:\n            f.write(format_as_text(messages, title))\n\n    return filepath\n\n\ndef extract_code_snippets(messages, output_dir):\n    code_dir = os.path.join(output_dir, \"code_snippets\")\n    Path(code_dir).mkdir(exist_ok=True)\n\n    code_pattern = r'```(\\w*)\\n(.*?)\\n```'\n    code_files = []\n\n    for i, msg in enumerate(messages):\n        for j, (lang, code) in enumerate(re.findall(code_pattern, msg[\"content\"], re.DOTALL)):\n            ext = lang if lang else \"txt\"\n            timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n            filename = f\"snippet_{i}_{j}_{timestamp}.{ext}\"\n            filepath = os.path.join(code_dir, filename)\n            with open(filepath, 'w', encoding='utf-8') as f:\n                f.write(code)\n            code_files.append(filepath)\n    return code_files\n\n\ndef main():\n    args = parse_args()\n\n    if not reset_output_directory(args.output_dir):\n        fallback = os.path.expanduser(\"~/Downloads/chat_exports\")\n        print(f\"⚠ Falling back to: {fallback}\")\n        args.output_dir = fallback\n        reset_output_directory(fallback)\n\n    title = args.title.strip() or \"Chat Export\"\n    content = read_chat_from_file(args.input_file)\n    if not content:\n        print(\"❌ No content to parse. Exiting.\")\n        return\n\n    messages = parse_chat(content)\n    if not messages:\n        print(\"❌ Could not parse any messages. Exiting.\")\n        return\n\n    saved_file = save_chat(messages, args.format, args.output_dir, title)\n    code_files = extract_code_snippets(messages, args.output_dir)\n\n    print(\"\\n✅ Export complete!\")\n    print(f\"Chat saved to: {saved_file}\")\n    if code_files:\n        print(f\"{len(code_files)} code snippets extracted to: {os.path.join(args.output_dir, 'code_snippets')}\")\n\n    print(f\"\\nTo continue processing, run:\\npython3 /mnt/chromeos/removable/US",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_125041.txt",
    "chunk_id": "08c8870fc586_359",
    "start_char": 646200,
    "end_char": 648200,
    "created_at": "2025-05-21T07:21:42+00:00"
  }
}