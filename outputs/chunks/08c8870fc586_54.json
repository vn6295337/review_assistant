{
  "content": "alysis {timestamp}\"\n        \n        # Replace template placeholders\n        prompt = template.replace(\"{summaries}\", joined_summaries)\n        prompt = prompt.replace(\"{title}\", title)\n        \n        return prompt\n    except Exception as e:\n        print(f\"⚠ Error generating prompt: {str(e)}\")\n        return None\n\n\ndef save_prompt(prompt, output_dir):\n    \"\"\"\n    Save a prompt to a file with timestamp.\n    \n    Args:\n        prompt (str): Prompt content\n        output_dir (str): Directory to save the prompt\n        \n    Returns:\n        str: Path to saved file or None if error\n    \"\"\"\n    try:\n        os.makedirs(output_dir, exist_ok=True)\n        timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        output_file = os.path.join(output_dir, f\"summary_prompt_{timestamp}.txt\")\n        \n        with open(output_file, 'w', encoding='utf-8') as f:\n            f.write(prompt)\n            \n        return output_file\n    except Exception as e:\n        print(f\"⚠ Error saving prompt: {str(e)}\")\n        return None\n\n\ndef main():\n    \"\"\"Main function to process summaries and create a prompt.\"\"\"\n    parser = argparse.ArgumentParser(\n        description='Generate a master prompt from summarized chunks'\n    )\n    parser.add_argument('--summaries-dir', required=True,\n                        help='Directory containing summary files')\n    parser.add_argument('--template-file', required=True,\n                        help='Path to the template file')\n    parser.add_argument('--output-dir', required=True,\n                        help='Directory to save the prompt')\n    parser.add_argument('--title', default=None,\n                        help='Optional title for the prompt')\n    parser.add_argument('--verbose', '-v', action='store_true',\n                        help='Enable verbose output')\n    args = parser.parse_args()\n    \n    if args.verbose:\n        print(f\"Loading template from: {args.template_file}\")\n    \n    template = load_template(args.template_file)\n    if not",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_125041.txt",
    "chunk_id": "08c8870fc586_54",
    "start_char": 97200,
    "end_char": 99200,
    "created_at": "2025-05-21T07:21:40+00:00"
  }
}