{
  "content": "s for consistency.\n\n\"\"\"\nDatabase models for the application.\n\"\"\"\n\nfrom flask_sqlalchemy import SQLAlchemy\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom datetime import datetime\nfrom typing import Dict, Any\n\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    \"\"\"User model for authentication and user management.\"\"\"\n\n    id: int = db.Column(db.Integer, primary_key=True)\n    username: str = db.Column(db.String(80), unique=True, nullable=False)\n    email: str = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash: str = db.Column(db.String(128), nullable=False)\n    is_active: bool = db.Column(db.Boolean, default=True)\n    created_at: datetime = db.Column(db.DateTime, default=datetime.utcnow)\n\n    orders = db.relationship('Order', backref='user', lazy=True)\n\n    def __init__(self, username: str, email: str, password: str) -> None:\n        self.username = username\n        self.email = email\n        self.password_hash = generate_password_hash(password)\n\n    def check_password(self, password: str) -> bool:\n        \"\"\"Verify the password against stored hash.\"\"\"\n        return check_password_hash(self.password_hash, password)\n\n    def to_dict(self) -> Dict[str, Any]:\n        \"\"\"Serialize user data for APIs or other uses.\"\"\"\n        return {\n            'id': self.id,\n            'username': self.username,\n            'email': self.email,\n            'is_active': self.is_active,\n            'created_at': self.created_at.isoformat()\n        }\n    \n    def __repr__(self) -> str:\n        return f\"<User {self.username} ({self.email})>\"\n\nclass Product(db.Model):\n    \"\"\"Product model for the store.\"\"\"\n\n    id: int = db.Column(db.Integer, primary_key=True)\n    name: str = db.Column(db.String(100), nullable=False)\n    description: str = db.Column(db.Text)\n    price: float = db.Column(db.Float, nullable=False)\n    stock: int = db.Column(db.Integer, default=0)\n    category: str = db.Column(db.String(50))\n    created_at: datetime = db.Column(",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_125041.txt",
    "chunk_id": "08c8870fc586_58",
    "start_char": 104400,
    "end_char": 106400,
    "created_at": "2025-05-21T07:21:40+00:00"
  }
}