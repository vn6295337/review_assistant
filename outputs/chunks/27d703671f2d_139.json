{
  "content": "ary files\n        verbose (bool): Whether to print verbose output\n\n    Returns:\n        int: Number of successfully processed files\n    \"\"\"\n    if verbose:\n        print(f\"Processing directory: {input_dir}\")\n        print(f\"Output directory: {output_dir}\")\n\n    if not os.path.isdir(input_dir):\n        print(f\"âš  Input directory does not exist: {input_dir}\")\n        return 0\n\n    os.makedirs(output_dir, exist_ok=True)\n    success_count = 0\n    file_count = 0\n\n    for filename in sorted(os.listdir(input_dir)):\n        if filename.endswith('.json'):\n            file_count += 1\n            input_file = os.path.join(input_dir, filename)\n            if summarize_chunk(input_file, output_dir):\n                success_count += 1\n\n    if verbose:\n        print(\"\\nSummary Generation Complete\")\n        print(f\"Processed {file_count} files\")\n        print(f\"Successfully summarized {success_count} files\")\n\n    return success_count\n\n\ndef main():\n    parser = argparse.ArgumentParser(\n        description='Generate summaries from JSON chunk files'\n    )\n    parser.add_argument('--input-dir', '-i', required=True,\n                        help='Directory containing chunked JSON files')\n    parser.add_argument('--output-dir', '-o', required=True,\n                        help='Directory to save summaries')\n    parser.add_argument('--verbose', '-v', action='store_true',\n                        help='Enable verbose output')\n    args = parser.parse_args()\n\n    process_directory(args.input_dir, args.output_dir, args.verbose)\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n-------\n\n#!/usr/bin/env python3\n\"\"\"\nMaster Content Prompt Helper\n\nThis script assembles summarized chunks into a unified prompt\nfor use with AI assistants in a local RAG workflow.\n\"\"\"\n\nimport os\nimport json\nimport argparse\nimport glob\nimport datetime\nfrom pathlib import Path\nfrom typing import List, Optional\n\n# Default directories (fallbacks if no CLI args)\nDEFAULT_SUMMARIES_DIR = Path(__file__).resolve().parent.parent / \"output",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_113849.txt",
    "chunk_id": "27d703671f2d_139",
    "start_char": 250200,
    "end_char": 252200,
    "created_at": "2025-05-21T06:08:50+00:00"
  }
}