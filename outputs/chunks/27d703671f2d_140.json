{
  "content": "ob\nimport datetime\nfrom pathlib import Path\nfrom typing import List, Optional\n\n# Default directories (fallbacks if no CLI args)\nDEFAULT_SUMMARIES_DIR = Path(__file__).resolve().parent.parent / \"outputs/summaries\"\nDEFAULT_PROMPTS_DIR = Path(__file__).resolve().parent.parent / \"outputs/prompts\"\n\n\ndef load_template(template_path: Path) -> Optional[str]:\n    \"\"\"Load a prompt template file.\"\"\"\n    try:\n        return template_path.read_text(encoding='utf-8')\n    except Exception as e:\n        print(f\"⚠ Error loading template: {e}\")\n        return None\n\n\ndef load_summaries(summaries_dir: Path, verbose: bool = False) -> List[dict]:\n    \"\"\"Load all summary JSON files in a directory.\"\"\"\n    summaries = []\n    try:\n        summary_files = sorted(summaries_dir.glob(\"summary_*.json\"))\n        for file in summary_files:\n            with open(file, 'r', encoding='utf-8') as f:\n                data = json.load(f)\n                summaries.append(data)\n                if verbose:\n                    print(f\"✓ Loaded summary: {file.name}\")\n    except Exception as e:\n        print(f\"⚠ Error loading summaries: {e}\")\n    return summaries\n\n\ndef generate_prompt(template: str, summaries: List[dict], title: Optional[str] = None) -> Optional[str]:\n    \"\"\"Assemble the final prompt from summaries and a template.\"\"\"\n    try:\n        summary_texts = [s.get(\"summary\", \"\") for s in summaries if s.get(\"summary\")]\n        if not summary_texts:\n            raise ValueError(\"No summaries contain text\")\n\n        joined = \"\\n\\n---\\n\\n\".join(summary_texts)\n        title = title or f\"Content Analysis {datetime.datetime.now():%Y-%m-%d}\"\n\n        return template.replace(\"{summaries}\", joined).replace(\"{title}\", title)\n    except Exception as e:\n        print(f\"⚠ Error generating prompt: {e}\")\n        return None\n\n\ndef save_prompt(prompt: str, output_dir: Path) -> Optional[Path]:\n    \"\"\"Save prompt to a timestamped .txt file.\"\"\"\n    try:\n        output_dir.mkdir(parents=True, exist_ok=True)\n        filename",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_113849.txt",
    "chunk_id": "27d703671f2d_140",
    "start_char": 252000,
    "end_char": 254000,
    "created_at": "2025-05-21T06:08:50+00:00"
  }
}