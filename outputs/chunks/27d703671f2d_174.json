{
  "content": "le\", type=str, default=\"Chat\",\n                        help=\"Base filename prefix (default: Chat)\")\n    args = parser.parse_args()\n\n    # Ensure directories exist\n    CHAT_SESSIONS_DIR.mkdir(parents=True, exist_ok=True)\n    CHUNKS_DIR.mkdir(parents=True, exist_ok=True)\n    SUMMARIES_DIR.mkdir(parents=True, exist_ok=True)\n\n    # Open blank nano session\n    tmp_file = Path(\"/tmp\") / f\"chat_input_{datetime.datetime.now():%Y%m%d_%H%M%S}.txt\"\n    print(\"\\nüìã Paste chat content into the nano window. Save and exit when done (Ctrl-O, Enter, Ctrl-X).\")\n    if not open_nano(tmp_file):\n        return\n\n    if not is_file_nonempty(tmp_file):\n        print(\"‚ùå No content captured. Exiting.\")\n        tmp_file.unlink(missing_ok=True)\n        return\n\n    # Save to codebase/chat_sessions\n    timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    safe_title = args.title.strip().replace(\" \", \"_\")\n    dest_file = CHAT_SESSIONS_DIR / f\"{safe_title}_{timestamp}.txt\"\n    shutil.move(tmp_file, dest_file)\n    print(f\"‚úÖ Chat saved to: {dest_file}\")\n\n    # Run file_chunker\n    print(\"üîó Chunking the chat file ‚Ä¶\")\n    run_python(FILE_CHUNKER,\n               \"--input-file\", dest_file,\n               \"--output-dir\", CHUNKS_DIR,\n               \"--chunk-size\", os.environ.get(\"DEFAULT_CHUNK_SIZE\", \"2000\"),\n               \"--overlap\", os.environ.get(\"DEFAULT_OVERLAP\", \"200\"))\n\n    # Run file_summarizer\n    print(\"üìù Summarising chunks ‚Ä¶\")\n    run_python(FILE_SUMMARIZER,\n               \"--input-dir\", CHUNKS_DIR,\n               \"--output-dir\", SUMMARIES_DIR)\n\n    # Completion message\n    print(\"\\nüéâ RAG preprocessing complete!\")\n    print(\"Next: run mcp_helper.py to generate a structured prompt.\")\n    print(f\"python3 {PYTHON_DIR / 'mcp_helper.py'} --template-file {os.environ.get('DEFAULT_TEMPLATE')} \"\n          f\"--summaries-dir {SUMMARIES_DIR} --output-dir {os.environ.get('PROMPTS_DIR')}\\n\")\n\n\nif __name__ == \"__main__\":\n    try:\n        main()\n    except RuntimeError as err:\n        print(f\"‚ùå {e",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_113849.txt",
    "chunk_id": "27d703671f2d_174",
    "start_char": 313200,
    "end_char": 315200,
    "created_at": "2025-05-21T06:08:51+00:00"
  }
}