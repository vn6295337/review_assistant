{
  "content": "ame  # Just keep the filename\n                    \n                self.metadata.append({\n                    \"source\": source_file,\n                    \"chunk_id\": chunk_data.get('metadata', {}).get('chunk_id', 'Unknown')\n                })\n                \n            except Exception as e:\n                print(f\"Error loading chunk file {chunk_file}: {e}\")\n                \n        print(f\"Loaded {len(self.chunks)} chunks successfully\")\n        return len(self.chunks) > 0\n    \n    def create_vector_store(self):\n        \"\"\"Create the simple vector store\"\"\"\n        if not self.chunks:\n            print(\"No chunks loaded. Cannot create vector store.\")\n            return False\n            \n        print(f\"Creating vector store for {len(self.chunks)} chunks...\")\n        try:\n            self.vector_store = SimpleVectorStore(self.chunks, self.metadata)\n            print(\"Vector store created successfully\")\n            return True\n        except Exception as e:\n            print(f\"Error creating vector store: {e}\")\n            return False\n            \n    def setup(self):\n        \"\"\"Complete setup process\"\"\"\n        if not self.load_chunks():\n            return False\n        if not self.create_vector_store():\n            return False\n        return True\n        \n    def answer_question(self, question, k=3):\n        \"\"\"Answer a question using RAG\"\"\"\n        if not self.vector_store:\n            print(\"Vector store not initialized. Please run setup first.\")\n            return None\n            \n        print(f\"Processing question: {question}\")\n        \n        # Retrieve similar chunks\n        results = self.vector_store.similarity_search(question, top_k=k)\n        \n        if not results:\n            return \"I couldn't find any relevant information in the codebase to answer your question.\"\n            \n        # Format the answer with relevant context\n        answer = \"Based on the codebase, here's what I found:\\n\\n\"\n        \n        for i, result in enumerate(results):\n",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_113849.txt",
    "chunk_id": "27d703671f2d_40",
    "start_char": 72000,
    "end_char": 74000,
    "created_at": "2025-05-21T06:08:50+00:00"
  }
}