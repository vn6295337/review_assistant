{
  "content": "       except (KeyboardInterrupt, EOFError):\n            break\n    print(\"ðŸ‘‹ Goodbye!\")\n\nif __name__ == \"__main__\":\n    main()\n2â€¯Â·â€¯sbert_rag_assistant.py  (formerly rag_assistant.py)\n#!/usr/bin/env python3\n\"\"\"\nSBERTâ€‘powered RAG Assistant\n---------------------------\nRequires: sentence-transformers, torch (heavy).\n\nUsage:\n  ./sbert_rag_assistant.py                # uses CHUNKS_DIR from config.sh\n  ./sbert_rag_assistant.py --chunks-dir ./my_chunks --top-k 8\n\"\"\"\n\nimport argparse, json, os\nfrom pathlib import Path\n\n# Grab default CHUNKS_DIR from config.sh if present\nCFG = Path(__file__).resolve().parents[1] / \"scripts\" / \"config.sh\"\nDEFAULT_CHUNKS = \"./outputs/chunks\"\nif CFG.is_file():\n    with open(CFG) as f:\n        for ln in f:\n            if ln.startswith(\"export CHUNKS_DIR\"):\n                DEFAULT_CHUNKS = ln.split(\"=\",1)[1].strip().strip('\"')\n                break\n\ndef load_chunks(dir_path: Path):\n    items = []\n    for fp in dir_path.glob(\"*.json\"):\n        data = json.loads(fp.read_text())\n        text = data.get(\"text\") or data.get(\"content\") or \"\"\n        items.append({\"text\": text, \"file\": fp.name})\n    return items\n\ndef build_embeddings(chunks, model):\n    embs = model.encode([c[\"text\"] for c in chunks], convert_to_tensor=True)\n    for c,e in zip(chunks, embs): c[\"emb\"] = e\n    return chunks\n\ndef search(query, chunks, model, k):\n    qv = model.encode(query, convert_to_tensor=True)\n    from sentence_transformers import util\n    sims = util.cos_sim(qv, [c[\"emb\"] for c in chunks])[0]\n    top = sims.argsort(descending=True)[:k]\n    return [(chunks[i], float(sims[i])) for i in top]\n\ndef interactive(chunks, model, k):\n    print(\"ðŸ’¬ Ask me about your codebase (exit/quit to stop)\")\n    while True:\n        q = input(\"\\n> \").strip()\n        if q.lower() in {\"exit\",\"quit\"}: break\n        res = search(q, chunks, model, k)\n        for i,(chunk,score) in enumerate(res,1):\n            snippet = chunk[\"text\"][:500] + (\"...\" if len(chunk[\"text\"])>500 else \"\")\n            prin",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_113849.txt",
    "chunk_id": "27d703671f2d_48",
    "start_char": 86400,
    "end_char": 88400,
    "created_at": "2025-05-21T06:08:50+00:00"
  }
}