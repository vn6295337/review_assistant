{
  "content": " SQLAlchemy()\n\nclass User(db.Model):\n    \"\"\"User model for authentication and user management.\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(128), nullable=False)\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.datetime.utcnow)\n    \n    orders = db.relationship('Order', backref='user', lazy=True)\n    \n    def __init__(self, username, email, password):\n        self.username = username\n        self.email = email\n        self.password_hash = generate_password_hash(password)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'username': self.username,\n            'email': self.email,\n            'is_active': self.is_active,\n            'created_at': self.created_at.isoformat()\n        }\n\nclass Product(db.Model):\n    \"\"\"Product model for the store.\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    price = db.Column(db.Float, nullable=False)\n    stock = db.Column(db.Integer, default=0)\n    category = db.Column(db.String(50))\n    created_at = db.Column(db.DateTime, default=datetime.datetime.utcnow)\n    \n    order_items = db.relationship('OrderItem', backref='product', lazy=True)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'name': self.name,\n            'description': self.description,\n            'price': self.price,\n            'stock': self.stock,\n            'category': self.category\n        }\n\nclass Order(db.Model):\n    \"\"\"Order model for tracking purchases.\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    status = db.Column(db.String(20), default='pending')  # pending, shipped, de",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_113849.txt",
    "chunk_id": "27d703671f2d_56",
    "start_char": 100800,
    "end_char": 102800,
    "created_at": "2025-05-21T06:08:50+00:00"
  }
}