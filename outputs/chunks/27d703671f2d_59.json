{
  "content": "umn(db.Text)\n    price: float = db.Column(db.Float, nullable=False)\n    stock: int = db.Column(db.Integer, default=0)\n    category: str = db.Column(db.String(50))\n    created_at: datetime = db.Column(db.DateTime, default=datetime.utcnow)\n\n    order_items = db.relationship('OrderItem', backref='product', lazy=True)\n\n    def to_dict(self) -> Dict[str, Any]:\n        return {\n            'id': self.id,\n            'name': self.name,\n            'description': self.description,\n            'price': self.price,\n            'stock': self.stock,\n            'category': self.category\n        }\n    \n    def __repr__(self) -> str:\n        return f\"<Product {self.name} (${self.price})>\"\n\nclass Order(db.Model):\n    \"\"\"Order model for tracking purchases.\"\"\"\n\n    id: int = db.Column(db.Integer, primary_key=True)\n    user_id: int = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    status: str = db.Column(db.String(20), default='pending')  # pending, shipped, delivered, cancelled\n    total_amount: float = db.Column(db.Float)\n    created_at: datetime = db.Column(db.DateTime, default=datetime.utcnow)\n\n    items = db.relationship('OrderItem', backref='order', lazy=True)\n\n    def to_dict(self) -> Dict[str, Any]:\n        return {\n            'id': self.id,\n            'user_id': self.user_id,\n            'status': self.status,\n            'total_amount': self.total_amount,\n            'created_at': self.created_at.isoformat(),\n            'items': [item.to_dict() for item in self.items]\n        }\n    \n    def __repr__(self) -> str:\n        return f\"<Order {self.id} Status: {self.status} Total: {self.total_amount}>\"\n\nclass OrderItem(db.Model):\n    \"\"\"Order item for linking products to orders.\"\"\"\n\n    id: int = db.Column(db.Integer, primary_key=True)\n    order_id: int = db.Column(db.Integer, db.ForeignKey('order.id'), nullable=False)\n    product_id: int = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)\n    quantity: int = db.Column(db.Integer, nullable=",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_113849.txt",
    "chunk_id": "27d703671f2d_59",
    "start_char": 106200,
    "end_char": 108200,
    "created_at": "2025-05-21T06:08:50+00:00"
  }
}