{
  "content": "         help='Title for the chat session (optional)')\n    return parser.parse_args()\n\ndef create_output_directory(output_dir):\n    \"\"\"Create the output directory if it doesn't exist.\"\"\"\n    try:\n        Path(output_dir).mkdir(parents=True, exist_ok=True)\n        return True\n    except Exception as e:\n        print(f\"Error creating directory: {e}\")\n        return False\n\ndef get_chat_content():\n    \"\"\"Get the chat content from the user.\"\"\"\n    print(\"\\n=== Claude Chat Exporter ===\")\n    print(\"\\nInstructions:\")\n    print(\"1. In your Claude chat window, select all content (Ctrl+A)\")\n    print(\"2. Copy it to clipboard (Ctrl+C)\")\n    print(\"3. Paste it below (Ctrl+V) and press Enter twice to finish\")\n    print(\"\\nPaste your chat content here:\")\n    \n    # Collect all lines until user enters a blank line\n    lines = []\n    try:\n        while True:\n            line = input()\n            if line.strip() == \"\":\n                # Check if it's the end or just a blank line within the content\n                confirm = input(\"Is this the end of your chat? (y/n): \").lower()\n                if confirm == 'y' or confirm == 'yes':\n                    break\n                else:\n                    lines.append(\"\")  # Preserve the blank line\n            else:\n                lines.append(line)\n    except KeyboardInterrupt:\n        print(\"\\nInput interrupted.\")\n    \n    return \"\\n\".join(lines)\n\ndef parse_chat(content):\n    \"\"\"Parse chat content into structured format.\"\"\"\n    # Split into messages\n    # Common patterns in Claude chat exports\n    patterns = [\n        r\"Human: (.*?)(?=\\nClaude: |\\Z)\",  # Human messages\n        r\"Claude: (.*?)(?=\\nHuman: |\\Z)\"   # Claude messages\n    ]\n    \n    messages = []\n    human_parts = re.findall(patterns[0], content, re.DOTALL)\n    claude_parts = re.findall(patterns[1], content, re.DOTALL)\n    \n    # Interleave the messages (they should alternate)\n    for i in range(max(len(human_parts), len(claude_parts))):\n        if i < len(human_parts):\n     ",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_113849.txt",
    "chunk_id": "27d703671f2d_71",
    "start_char": 127800,
    "end_char": 129800,
    "created_at": "2025-05-21T06:08:50+00:00"
  }
}