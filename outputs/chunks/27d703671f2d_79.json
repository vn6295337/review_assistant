{
  "content": "   \n            result.append(highlighted_line)\n    \n    return '\\n'.join(result)\n\ndef search_command_handler(args):\n    \"\"\"Handle the search command.\"\"\"\n    # Load chunks\n    print(f\"Loading chunks from {args.chunks_dir}...\")\n    chunks = load_chunks(args.chunks_dir, args.extensions)\n    print(f\"Loaded {len(chunks)} chunks\")\n    \n    # Search for the query\n    print(f\"Searching for '{args.query}'...\")\n    results = search_chunks(chunks, args.query, args.limit)\n    print(f\"Found {len(results)} matching chunks\")\n    \n    # Highlight matches\n    for chunk in results:\n        chunk['highlighted_content'] = highlight_matches(chunk['content'], args.query, args.context)\n    \n    # Display results\n    for i, chunk in enumerate(results):\n        print(f\"\\n--- Result {i+1} ---\")\n        print(f\"File: {chunk.get('file_path', 'Unknown')}\")\n        print(f\"Chunk: {chunk.get('chunk_id', 'Unknown')}\")\n        print(\"\\nContent:\")\n        print(chunk['highlighted_content'])\n    \n    # Save results to file if specified\n    if args.output:\n        try:\n            output_dir = Path(args.output).parent\n            output_dir.mkdir(parents=True, exist_ok=True)\n            \n            with open(args.output, 'w', encoding='utf-8') as f:\n                json.dump(results, f, indent=2)\n            print(f\"\\nResults saved to {args.output}\")\n        except Exception as e:\n            print(f\"Error saving results to {args.output}: {e}\", file=sys.stderr)\n            return False\n    \n    return True\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    args = parse_args()\n    \n    if args.command == 'create':\n        success = create_command_handler(args)\n        if not success:\n            sys.exit(1)\n    elif args.command == 'search':\n        success = search_command_handler(args)\n        if not success:\n            sys.exit(1)\n    else:\n        print(\"Invalid or missing command. Use --help for usage information.\", file=sys.stderr)\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\nChatGPT said",
  "metadata": {
    "source": "/mnt/chromeos/removable/USB Drive/review_assistant/codebase/chat_sessions/Chat_with_CFO_20250521_113849.txt",
    "chunk_id": "27d703671f2d_79",
    "start_char": 142200,
    "end_char": 144200,
    "created_at": "2025-05-21T06:08:50+00:00"
  }
}