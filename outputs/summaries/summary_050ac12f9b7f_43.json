{
  "source_file": "/mnt/chromeos/removable/USB Drive/review_assistant/outputs/chunks/050ac12f9b7f_43.json",
  "summary": "### Chunk unknown \u2014 unknown\n\n.\"\"\"\n    texts = [chunk[\"text\"] for chunk in chunks]\n    embeddings = embedding_model.encode(texts, convert_to_tensor=True)\n    for chunk, embedding in zip(chunks, embeddings):\n        chunk[\"embedding\"] = embedding\n    return chunks\n\ndef perform_similarity_search(query, embedded_chunks, embedding_model, top_k=5):\n    \"\"\"Search the top_k most relevant chunks given a user query.\"\"\"\n    query_vector = embedding_model.encode(query, convert_to_tensor=True)\n    similarity_scores = util.cos_sim(query_vector, [c[\"embedding\"] for c in embedded_chunks])[0]\n    top_indices = similarity_scores.argsort(descending=True)[:top_k]\n    return [(embedded_chunks[i], float(similarity_scores[i])) for i in top_indices]\n\ndef start_interactive_session(chunks, model):\n    \"\"\"Run a command-line interface for querying the chunk index.\"\"\"\n    print(\"\\n\ud83e\udde0 Ask your question (type 'exit' or 'quit' to end):\")\n    while True:\n        user_input = input(\"\\n> \")\n        if user_input.lower() in {\"exit\", \"quit\"}:\n\n\u2026"
}