{
  "source_file": "/mnt/chromeos/removable/USB Drive/review_assistant/outputs/chunks/08c8870fc586_238.json",
  "summary": "### Chunk unknown \u2014 unknown\n\n, convert_to_tensor=True)\n    similarity_scores = util.cos_sim(query_vector, [c[\"embedding\"] for c in embedded_chunks])[0]\n    top_indices = similarity_scores.argsort(descending=True)[:top_k]\n    return [(embedded_chunks[i], float(similarity_scores[i])) for i in top_indices]\n\ndef start_interactive_session(chunks, model):\n    \"\"\"Run a command-line interface for querying the chunk index.\"\"\"\n    print(\"\\n\ud83e\udde0 Ask your question (type 'exit' or 'quit' to end):\")\n    while True:\n        user_input = input(\"\\n> \")\n        if user_input.lower() in {\"exit\", \"quit\"}:\n            print(\"\ud83d\udc4b Session ended.\")\n            break\n        results = perform_similarity_search(user_input, chunks, model)\n        print(\"\\n\ud83d\udcda Top Results:\")\n        for idx, (result, score) in enumerate(results, start=1):\n            snippet = result[\"text\"][:500] + (\"...\" if len(result[\"text\"]) > 500 else \"\")\n            print(f\"\\n#{idx} ({result['file']}, Score: {score:.2f})\\n{snippet}\")\n\ndef main(chunks_directory):\n\n\u2026"
}