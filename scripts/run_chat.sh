#!/bin/bash
# run_chat.sh ‚Äì one-click chat-to-prompt workflow
# Usage: ./run_chat.sh "Chat Title"

set -e

# ‚îÄ‚îÄ‚îÄ Load configuration ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="${SCRIPT_DIR}/config.sh"        # config.sh lives in same folder
if [ ! -f "$CONFIG_FILE" ]; then
  echo "‚ùå config.sh not found at: $CONFIG_FILE"
  exit 1
fi
# shellcheck source=/dev/null
source "$CONFIG_FILE"                         # sets RAG_ROOT, PYTHON_DIR, etc.

# ‚îÄ‚îÄ‚îÄ Title (first CLI arg or default) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TITLE="${1:-Chat}"

echo "üöÄ  Starting RAG workflow for: $TITLE"
cd "$PYTHON_DIR"

# ‚îÄ‚îÄ‚îÄ 1. Chat ingestion via nano ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
python3 chat_exporter.py --title "$TITLE"

# ‚îÄ‚îÄ‚îÄ 2. Identify newest chat file ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LATEST_CHAT_FILE=$(ls -t "$CHAT_SESSIONS_DIR"/*.{md,txt,json} 2>/dev/null | head -n 1)
if [[ ! -f "$LATEST_CHAT_FILE" ]]; then
  echo "‚ùå  No chat file found in $CHAT_SESSIONS_DIR . Aborting."
  exit 1
fi
echo "‚úÖ  Latest chat file: $LATEST_CHAT_FILE"

# ‚îÄ‚îÄ‚îÄ 3. Chunking ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
echo "üî™  Chunking chat file‚Ä¶"
python3 "$PYTHON_DIR/file_chunker.py" \
        --input-file "$LATEST_CHAT_FILE" \
        --output-dir "$CHUNKS_DIR" \
        --chunk-size "$DEFAULT_CHUNK_SIZE" \
        --overlap "$DEFAULT_OVERLAP"

# ‚îÄ‚îÄ‚îÄ 4. Summarisation ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
echo "üß†  Summarising chunks‚Ä¶"
python3 "$PYTHON_DIR/file_summarizer.py" \
        --input-dir "$CHUNKS_DIR" \
        --output-dir "$SUMMARIES_DIR"

# ‚îÄ‚îÄ‚îÄ 5. Prompt generation ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
echo "üìù  Generating final MCP prompt‚Ä¶"
python3 "$PYTHON_DIR/mcp_helper.py" \
        --template-file "$DEFAULT_TEMPLATE" \
        --summaries-dir "$SUMMARIES_DIR" \
        --output-dir "$PROMPTS_DIR" \
        --title "$TITLE ‚Äì $(date +%F)"

# ‚îÄ‚îÄ‚îÄ 6. Open newest prompt in nano ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LATEST_PROMPT=$(ls -t "$PROMPTS_DIR"/*.txt 2>/dev/null | head -n 1)
if [[ -f "$LATEST_PROMPT" ]]; then
  echo "üìÇ  Opening prompt in nano ‚Üí $LATEST_PROMPT"
  nano "$LATEST_PROMPT"
else
  echo "‚ö†Ô∏è  No prompt found in $PROMPTS_DIR"
fi

echo "‚úÖ  RAG workflow complete."
